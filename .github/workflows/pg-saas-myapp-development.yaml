name: CI
run-name: ${{ github.actor }} is testing out GitHub Actions üöÄ
on:
  push:
    branches:
      - main
  pull_request:

env:
  RUST_TOOLCHAIN: stable
  TOOLCHAIN_PROFILE: minimal

jobs:
  Explore-GitHub-Actions:
    name: 1/4 GitHub Actions
    runs-on: ubuntu-latest
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - run: echo "üçè This job's status is ${{ job.status }}."
  install-apps:
    name: 2/4 Dia format conversion 
    needs: [Explore-GitHub-Actions]    
    runs-on: ubuntu-latest
    steps:
      - name: install dia diagramming tool
        run: |
          sudo apt-get update && sudo apt-get install -y dia
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: |
          pwd && ls ${{ github.workspace }}
      - run: |
          (cd ${{ github.workspace }}/docs && ./format-conversion.sh myappp-saas-pg )
#      - run: |
#          (cd ${{ github.workspace }}/docs && ./format-conversion.sh myappp-saas-sqlite )
#      - run: |
#          (cd ${{ github.workspace }}/docs && ./format-conversion.sh myappp-saas-mysql )
#      - run: |
#          (cd ${{ github.workspace }}/docs && ./format-conversion.sh myappp-saas-restapi-pg )
#      - run: |
#          (cd ${{ github.workspace }}/docs && ./format-conversion.sh myappp-saas-restapi-sqlite )
#      - run: |
#          (cd ${{ github.workspace }}/docs && ./format-conversion.sh myapp-lightweight-service )

## Commit and push all changed files.
#      - name: GIT Commit Build Artifacts (coverage, dist, devdist, docs)
#        # Only run on main branch push (e.g. after pull request merge).
#        if: github.event_name == 'push'
##         git config --global user.name "${{ env.CI_COMMIT_AUTHOR }}"
##         git commit -a -m "${{ env.CI_COMMIT_MESSAGE }}"
#        run: |
#          git config --global user.name "${{ github.actor }}"
#          git config --global user.email "tjyang2001@gmail.com"
#          git commit -a -m " commit by github runner"
#          git push
# disable for now	  
#      - name: Commit changes
#        uses: stefanzweifel/git-auto-commit-action@v4
#        with:
#          commit_message: Automated Change
#          branch: main
#          commit_options: '--no-verify --signoff'
#          commit_author: Author <actions@github.com>
#          status_options: '--untracked-files=no'
#          skip_dirty_check: true

  rustfmt:
    name: 3/4 rust format
    needs: [install-apps]
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: ${{ env.TOOLCHAIN_PROFILE }}
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          override: true
          components: rustfmt
      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
  test:
    name: 4/4 cargo test 
    needs: [rustfmt]
    runs-on: ubuntu-latest
    permissions:
      contents: read

    services:
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - "6379:6379"
      postgres:
        image: postgres
        env:
          POSTGRES_DB: myapp_development
          POSTGRES_USER: loco
          POSTGRES_PASSWORD: loco
        ports:
          - "5432:5432"
        # Set health checks to wait until postgres has started
        options: --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: ${{ env.TOOLCHAIN_PROFILE }}
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          override: true
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features --all



# References:
#  1. https://docs.github.com/en/actions/quickstart
#  2. https://joht.github.io/johtizen/build/2022/01/20/github-actions-push-into-repository.html
#  3. https://docs.github.com/en/apps/creating-github-apps/authenticating-with-a-github-app/making-authenticated-api-requests-with-a-github-app-in-a-github-actions-workflow
#  4. https://github.com/pnp4nagios/pnp4nagios/blob/master/.github/workflows/releasebuild.yml
#on:
#  workflow_dispatch:
#jobs:
#  demo_app_authentication:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Generate a token
#        id: generate_token
#        uses: actions/create-github-app-token@v1
#        with:
#          app-id: ${{ secrets.APP_ID }}
#          private-key: ${{ secrets.APP_PRIVATE_KEY }}
#
#      - name: Use the token
#        env:
#          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
#        run: |
#          gh api octocat
#
